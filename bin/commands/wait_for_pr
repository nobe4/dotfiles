##!/usr/bin/env bash
#VERSION 0.0.1
#/ Usage: wait_for_pr [FLAG] [CONDITION] [URL]
#/
#/ This is a base bash script with as many niceties included as possible.
#/ See comments below for each parts.
#/
#/ Flags:
#/   -h|--help          Show this help
#/   -v|--version       Show the version
#/   -c|--clear         Clear the screen before each check
#/
#/ Condition (current: ${CONDITION}):
#/   a|approved         PR is approved sufficiently
#/   c|ci_completed     CI is completed
#/   g|ci_green         CI is green
#/   m|merged           PR is merged
#/   r|ready            PR is approved and CI is green

set -e

YELLOW='\033[0;33m'
GREEN='\033[0;32m'
NO_COLOR='\033[0m'

show_help() { export CONDITION URL && grep ^#/ <"${0}" |cut -c4- | envsubst; }
show_version(){ grep ^#VERSION <"${0}" |cut -d' ' -f2; }

# Parse arguments
while [ "${#}" -gt 0 ]; do
	case "${1}" in
		-h|--help) show_help && exit 0 ;;
		-v|--version) show_version && exit 0 ;;
		-c|--clear) CLEAR=1 ;;
		-*)
			echo "Unknown flag '${1}'"
			show_help
			exit 1
			;;
		*)  break ;;
	esac
	shift 1
done

CONDITION="${1:-ready}"
if [ "${#}" -eq 0 ]; then
    show_help | awk '/Condition/,0'
	printf "condition [%s] > " "${CONDITION}"
	read -r input
	CONDITION="${input:-"${CONDITION}"}"
fi

case "${CONDITION}" in
	a|approved) CONDITION="approved" ;;
	g|ci_green) CONDITION="ci_green" ;;
	c|ci_completed) CONDITION="ci_completed" ;;
	r|ready) CONDITION="ready" ;;
	m|merged) CONDITION="merged" ;;
	*)
		echo "Unknown condition '${CONDITION}'"
		show_help
		exit 1
		;;
esac

shift 1 || true

URL="${*}"
if [ -z "${URL}" ]; then
	URL="$(get_pr "Enter PR URL to wait to be ${CONDITION}:")"
fi

function check_ci_green(){
	gh pr checks "${URL}" && checks_passed=0 || checks_passed=1

	if [ "${checks_passed}" == "0" ]; then
		printf "${GREEN}✓ PR CI is green${NO_COLOR}\n"
	else
		printf "${YELLOW}* PR CI is not green${NO_COLOR}\n"
	fi

	return "${checks_passed}"
}

function check_ci_completed(){
	gh pr checks "${URL}"
	gh pr view --json statusCheckRollup \
		-q '.statusCheckRollup[].status' "${URL}" \
		| grep 'IN_PROGRESS' >/dev/null && ci_completed=1 || ci_completed=0

	if [ "${ci_completed}" == "0" ]; then
		printf "${GREEN}✓ PR CI has completed${NO_COLOR}\n"
	else
		printf "${YELLOW}* PR CI has not completed${NO_COLOR}\n"
	fi

	return "${ci_completed}"
}

function check_approved() {
	missing_approvals_count="$(gh pr view "${URL}" --json reviewRequests -q '.reviewRequests | length')"
	if [ "${missing_approvals_count}" == "0" ]; then
		printf "${GREEN}✓ All required approvals done${NO_COLOR}\n"
	else
		printf "${YELLOW}* ${missing_approvals_count} remaining approvals needed${NO_COLOR}\n"
	fi

	return "${missing_approvals_count}"
}

function check_ready() {
    ready=0
	if ! check_ci_green; then ready=1; fi
	if ! check_approved; then ready=1; fi

	if [ "${ready}" == "0" ]; then
		printf "${GREEN}✓ PR is ready${NO_COLOR}\n"
	else
		printf "${YELLOW}* PR not ready yet${NO_COLOR}\n"
	fi

	return "${ready}"
}

function check_merged() {
	is_merged=$(gh pr view "${URL}" --json state -q '.state | contains("MERGED")')
	if [ "${is_merged}" == "true" ]; then
		printf "✓  PR is merged\n"
		return 0
	fi

	printf "* PR not merged yet\n"
	return 1
}

while true; do
	[ "${CLEAR}" == "1" ] && clear

	if "check_${CONDITION}"; then
		break
	fi

	printf "\n---\n"

	sleep 10
done
