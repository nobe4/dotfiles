#!/usr/bin/env bash
#/ pr - project interface for tmux
#/
#/ Usage: pr [FLAGS] [QUERY]
#/
#/ Select a local or remote project to switch to.
#/
#/ Local projects are folders in ${BASE_PATH}.
#/ Remote projects are repositories you contributed to.
#/
#/ Requirements:
#/   - tmux
#/   - fzf
#/   - gh
#/
#/ Flags:
#/   -h|--help      Display this help.
#/   -d|--delete    Delete the selected local project.
#/   -n|--new       Clone a project not in the contribution list.
#/                  Needs the 'owner/repo' or URL as QUERY.
#/
#/ Environment variables:
#/   FZF_DEFAULT_OPTS       Respects this value for every FZF invocation.
#/                          Value: '${FZF_DEFAULT_OPTS}'
#/
#/   PR_BASE_PATH           Path to the base folder.
#/                          Value: '${BASE_PATH}'
#/
#/   PR_CACHE_TTL_DAYS      Number of days after which the cache needs to update.
#/                          Set to -1 to always refresh.
#/                          Value: '${CACHE_TTL_DAYS}'
#/
#/   PR_CACHE_PATH          Path to the cache file.
#/                          value: '${CACHE_PATH}'
#/
#/   PR_FZF_PREVIEW_COMMAND FZF command for preview ({} corresponds to the selected project)
#/                          Set to ' ' to disable.
#/                          Value: '${FZF_PREVIEW_COMMAND}'
# TODO:
# - clone .dot into dev/nobe4/dotfiles
#   AND THEN ln it to '$HOME/.dot' so all the path can be fixed
#   see http://mywiki.wooledge.org/BashFAQ/028

set -e

# Exporting is required for envsubst
export BASE_PATH="${PR_BASE_PATH:-${HOME}/dev}"
export CACHE_TTL_DAYS="${PR_CACHE_TTL_DAYS:-1}"
export CACHE_PATH="${PR_CACHE_PATH:-/tmp/pr}"
REPOS_CACHE_PATH="${CACHE_PATH}/_repos"

# Indent to look nice in the help
# shellcheck disable=SC2016
DEFAULT_FZF_PREVIEW_COMMAND='
    if [ -f "${CACHE_PATH}/{}" ]; then
      cat "${CACHE_PATH}/{}"
    else
      # cache the command output
      mkdir -p "$(dirname "${CACHE_PATH}/{}")"
      GH_FORCE_TTY=80 gh repo view {} | tee "${CACHE_PATH}/{}"
    fi
'
export FZF_PREVIEW_COMMAND="${PR_FZF_PREVIEW_COMMAND:-${DEFAULT_FZF_PREVIEW_COMMAND}}"

DEFAULT_FZF_OPTS='--preview-window=up:85%:border-bottom:wrap --no-mouse'
export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS:-${DEFAULT_FZF_OPTS}}"

# shellcheck disable=SC2016
REPO_QUERY='
  query($endCursor: String) {
    viewer {
      repositoriesContributedTo(
        first: 100
        isLocked: false
        includeUserRepositories: true
        after: $endCursor
      ) {
        nodes { nameWithOwner }
        pageInfo { hasNextPage endCursor }
      }
    }
  }
'
REPO_EXTRACT='.[].viewer.repositoriesContributedTo.nodes[].nameWithOwner'

show_help() {
  grep ^#/ <"${0}" | cut -c4- | envsubst
}

cache_age_in_days(){
  echo "$((( $(date +%s) - $(date -r "${REPOS_CACHE_PATH}" +%s)) / 86400))"
}

is_cache_fresh(){
  [ ! -f "${REPOS_CACHE_PATH}" ] && return 1
  [ "$(cache_age_in_days)" -gt "${CACHE_TTL_DAYS}" ] && return 1
  return 0
}

update_cache(){
  is_cache_fresh && return

  mkdir -p "${CACHE_PATH}"
  rm -rf "${CACHE_PATH:?}/*"

  echo "Writing repo list to ${REPOS_CACHE_PATH}"
  get_projects_contributed_to | sort > "${REPOS_CACHE_PATH}"
}

get_projects_contributed_to(){
  gh api graphql \
    --paginate \
    -f query="${REPO_QUERY}" \
    --jq "${REPO_EXTRACT}"
}

get_local_projects(){
  find "${BASE_PATH}" -type d -maxdepth 2 -mindepth 2 \
    | sed "s|^${BASE_PATH}/||"
}

exclude_local_projects(){
  while read -r repo; do
    [ ! -d "${BASE_PATH}/${repo}" ] && echo "${repo}"
  done
}

get_remote_projects(){
  exclude_local_projects < "${REPOS_CACHE_PATH}"
}

get_remote_project(){
  gh repo view --json nameWithOwner --jq '.nameWithOwner' "${1}"
}

get_all_projects(){
  echo -e "$(get_local_projects)\n$(get_remote_projects)"
}

select_project(){
  echo "${1}" \
    | sort \
    | fzf \
      --select-1 \
      --query="${2}" \
      --header "${3:-Select project}" \
      --preview "${FZF_PREVIEW_COMMAND}" \
    || true # prevent fzf from failing on exit
}

clone_project(){
  project_path="${BASE_PATH}/${1}"
  if [ ! -d "${project_path}" ]; then
    gh repo clone "${1}" "${project_path}"
  fi
}

delete_project(){
  rm -rf "${BASE_PATH:?}/${1:?}"
}

switch_session(){
  if ! tmux has-session -t "${1}" 2> /dev/null; then
    tmux new-session -d -s "${1}" -c "${BASE_PATH}/${1}"
  fi

  if [ "${TERM_PROGRAM}" = "tmux" ]; then
    tmux switch-client -t "${1}"
  else
    tmux attach-session -t "${1}"
  fi
}

query=""
action="default"

while [ $# -gt 0 ]; do
  case "${1}" in
    -h|--help) show_help && exit 0 ;;
    -d|--delete) action="delete" ;;
    -n|--new) action="new" ;;
    *) query="${1}" ;;
  esac

  shift 1
done

update_cache

case "${action}" in
  default)
    project="$(select_project "$(get_all_projects)" "${query}" "Select project")"
    clone_project "${project}"
    switch_session "${project}"
    ;;
  delete)
    project="$(select_project "$(get_local_projects)" "${query}" "Select project to delete")"
    delete_project "${project}"
    echo "${project} deleted locally"
    ;;
  new)
    project=$(get_remote_project "${query}")
    clone_project "${project}"
    switch_session "${project}"
    ;;
esac
