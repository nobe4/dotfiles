" Introduction and notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldmethod=marker spell:
"
"                 _             ___
"                | |           /   |
"     _ __   ___ | |__   ___  / /| |
"    | '_ \ / _ \| '_ \ / _ \/ /_| |
"    | | | | (_) | |_) |  __/\___  |
"    |_| |_|\___/|_.__/ \___|    |_/
"
"    Personal vimrc of Victor Haffreingue
"    Use it and share it as you like.
"
"    Copyright (C) 2015-2018, Victor Haffreingue
"
"    Permission is hereby granted, free of charge, to any person obtaining a
"    copy of this software and associated documentation files (the "Software"),
"    to deal in the Software without restriction, including without limitation
"    the rights to use, copy, modify, merge, publish, distribute, sublicense,
"    and/or sell copies of the Software, and to permit persons to whom the
"    Software is furnished to do so, subject to the following conditions:
"
"    The above copyright notice and this permission notice shall be included in
"    all copies or substantial portions of the Software.
"
"    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
"    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
"    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
"    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
"    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
"    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
"    DEALINGS IN THE SOFTWARE.
" }
" Important {
set nocompatible " be iMproved, required
let mapleader="\<Space>" " need to set the mapleader before the plugins
" }
" Plugins {
" Vim-Plug Initialisation {
call plug#begin('~/.vim/plugged')
" }
" nobe4 {
Plug 'nobe4/vimcorrect'
nnoremap Z= :Correct<CR>
Plug 'nobe4/exchange.vim/'

Plug 'nobe4/curl.vim/'
nnoremap <leader>c :call curl#Process()
" }
" editorconfig/editorconfig-vim {
Plug 'editorconfig/editorconfig-vim'
" }
" mattn/gist-vim {
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'
let g:gist_post_private = 1
" }
" Colorscheme {
Plug 'nobe4/mnml.vim'
" }
" mbbill/undotree {
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
nnoremap <leader>ut :UndotreeToggle<CR>
nnoremap <leader>uf :UndotreeFocus<CR>
" }
" matchit {
Plug 'vim-scripts/matchit.zip'
" }
" mattn/emmet-vim {
Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key=','
autocmd FileType html,css,less,eruby,jsp,jspf,htmldjango EmmetInstall
" }
" danro/rename.vim {
Plug 'danro/rename.vim', { 'on': 'Rename' }
" }
" w0rp/ale {
Plug 'w0rp/ale'
let g:ale_lint_on_text_changed="never" " Don't distract me, only lint on save
let g:ale_linter = {
\   'go': ['golint', 'govet'],
\   'yaml': ['prettier'],
\}
let g:ale_fixers = {
\   'go': ['goimports'],
\   'yaml': ['prettier'],
\}
let g:ale_fix_on_save = 1
" }
" scrooloose/nerdcommenter {
Plug 'scrooloose/nerdcommenter'
let NERDSpaceDelims=1
" }
" christoomey/vim-tmux-navigator {
Plug 'christoomey/vim-tmux-navigator'
" }
" junegunn/fzf {
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
nnoremap <leader>f :FZF<CR>
Plug 'junegunn/fzf.vim'
" }
" junegunn/vim-easy-align {
Plug 'junegunn/vim-easy-align'
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }
" tpope/* {
Plug 'tpope/vim-fugitive'
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gp :Gpush -u
nnoremap <Leader>gl :Gpull

Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-scriptease'
" }
" metakirby5/codi.vim {
Plug 'metakirby5/codi.vim'
" }
" Vim-plug end of Initialisation {
call plug#end()
" }
" ripgrep {
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
" }
" }
" Moving around, searching and patterns {
set incsearch "highlight as you type you search phrase
set ignorecase " ignore case when using a search pattern
set smartcase  " override 'ignorecase' when pattern has upper case characters
" }
" Tags {
" store tags file under the git directory to exclude from versioning
set tag+=.git/tags
" }
" Displaying text {
set number

set list " show invisible characters
set listchars=tab:\|\ ,trail:·,extends:›,precedes:‹,nbsp:·
set fillchars+=vert:\ 

set nowrap

" keep 5 lines up/down the cursor
set scrolloff=5

" scroll 1 column at a time
set sidescroll=1
" leave at least 10 column left and right when scrolling horizontally
set sidescrolloff=10
" }
" Syntax, highlighting and spelling {
syntax on " Activate syntax highlighting
set hlsearch

set background=dark
colorscheme mnml

" Clearing uses the current background color
set t_ut=
set t_Co=256 " Number of available colors
" }
" Multiple windows {
set hidden " Allow hidden non-written buffers
set switchbuf=usetab,newtab
" }
" Editing text {
set backspace=indent,eol,start

" Combine comments on joining lines
set formatoptions+=j
set completeopt=menu,preview
" }
" Tabs and indenting {
set noexpandtab " Insert tab
set autoindent " Use the same indent as the previous line
set tabstop=2 " Number of spaces a <Tab> in the text stands for
set shiftwidth=2 " Number of spaces used for each step of (auto)indent
" }
" Folding {
set foldenable " Turn on folding
set foldmethod=syntax " Most of the code will be syntax-indented
set foldopen=block,hor,mark,percent,quickfix,tag " what movements
set foldlevelstart=99 " disable auto folding on open
" }
" Reading and writing files {
set autoread
" }
" The swap file {
" Store swap files in fixed location, not current directory.
set directory=~/.vim/swapdir//
set updatecount=10
" }
" Command line editing {
set wildmode=longest,list,full
set wildmenu " Command-line completion shows a list of matches
set undofile " save and restore undo history
set undodir=~/.vim/undodir  " list of directories for undo files
set wildignore+=*.pyc
" }
" executing external commands {
set shell=/bin/bash
" }
" Language specific {
" Enable spell for commit messages
autocmd! Filetype gitcommit set spell
" Google script -> Javascript
autocmd! bufreadpost *.gs set syntax=javascript
autocmd! bufreadpost *.coffee set syntax=javascript
autocmd! BufRead,BufNewFile COMMIT_EDITMSG :silent :g/\v^# On branch (\u+-\d+).+/t0|s//[\1]
autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufFilePre,BufRead *.jspf set filetype=jsp
autocmd BufNewFile,BufFilePre,BufRead *.sls set filetype=yaml
autocmd Filetype haskell setlocal ts=4 sw=4 sts=0 expandtab
autocmd Filetype markdown setlocal ts=4 sw=4 sts=0 expandtab linebreak wrap
autocmd Filetype python setlocal foldmethod=indent
" Format go file after saving
autocmd! BufWritePost *.go :silent exec "!~/go/bin/goimports -w % && gofmt -w -s %" | redraw!
" Format python file after saving with black
autocmd! BufWritePost *.py :silent exec "!black %" | redraw!
" }
" Multi-byte characters {
scriptencoding=utf-8
set encoding=utf-8 " Character encoding
set fileencoding=utf-8
set termencoding=utf-8
" }
" Mappings {
" move vertically inside wrapping lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" I only use those mapping in tpope/vim-unimpaired...
" Inspired by https://git.io/vHtuc
function! s:MapNextFamily(map,cmd)
  execute 'nnoremap <silent> ['.        a:map .' :<C-U>'.a:cmd.'previous<CR>"'
  execute 'nnoremap <silent> ]'.        a:map .' :<C-U>'.a:cmd.'next<CR>"'
  execute 'nnoremap <silent> ['.toupper(a:map).' :<C-U>'.a:cmd.'first<CR>"'
  execute 'nnoremap <silent> ]'.toupper(a:map).' :<C-U>'.a:cmd.'last<CR>"'
endfunction

call s:MapNextFamily('q','c')
call s:MapNextFamily('t','t')

" Select last pasted text
noremap gp '[v']

" Replay mapping over visual selection
vnoremap @ :norm@

" edit and source .vimrc
nnoremap <Leader>ve :e $MYVIMRC<CR>
nnoremap <Leader>vs :so $MYVIMRC

" save file
nnoremap <Leader>w :w<CR>
" quit without saving
nnoremap <Leader>q :quit!
" quit after saving
nnoremap <Leader>x :xit

" Quick make (note the space at the end of the command)
nnoremap <Leader>m :make 

" Duplicate and comment line
nmap <Leader>dc yy<Space>c<Space>p

" remove the ex mode
nnoremap Q <NOP>

" prepare a quick command
" http://vi.stackexchange.com/a/3136/1821
nnoremap <Leader>R :nnoremap <lt>Leader>r :

" Force save
cnoremap w!! w !sudo tee % >/dev/null

" Don't save a filename with name '
cnoremap w' w

" In insert mode <C-\> remove unwanted <CR> insertion
inoremap <C-\> <C-o>:left 0<Cr><BS>

" In normal mode <C-\> grep for the word under the cursor
" inspiration: https://robots.thoughtbot.com/faster-grepping-in-vim
nnoremap <C-\> :grep! --word-regexp '<C-R><C-W>'<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Rg :silent! grep! <args>|cwindow|redraw!
nnoremap \ :Rg<Space>

inoremap <CR> <C-G>u<CR>

" Before deleting from insert mode, create a new change
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" Create a new tab
nnoremap <Leader>tn :tabnew 

" Copy/Paste with system clipboard
function! CmdPaste() abort
    set paste
    normal! "+p
    set nopaste
endfunction

nnoremap <Leader>yp :call CmdPaste()<CR>
nnoremap <Leader>yc "+yy
vnoremap <Leader>yc "+y

" execute cmake from command line
command! -nargs=1 Cmake !cmake "<args>"

" Make gf always work
nnoremap gf :e <cfile><CR>

" Switch to previous buffer
nnoremap <Leader>b :b#<CR>

" Switch to alternate file, thanks to projectionist
nnoremap <Leader>a :A<CR>

" Open buffer list and prepare a switch
nnoremap <Leader>l :ls<CR>:buffer<Space>

" Clear the highlight
nnoremap <silent> <Leader><Leader> :<C-U>nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR>

" Make <C-F> insert current path in command line mode
cnoremap <C-F> <C-R>=expand('%:p:h')<CR>/

" Display a simple help for debugging
cnoremap <C-H> "cont quit next step interrupt finish backtrace up down<CR>

" Enhance the register pasting
nnoremap "p :reg <bar> exec 'normal! "'.input('>').'p'<CR>

nnoremap <C-W>z :resize <bar> vertical resize<CR>

nnoremap g<C-o> :!open .<CR><CR>

"}
" Abbreviations {
iabbrev pydebug import pdb; pdb.set_trace()
iabbrev red* * { color: red !important; }
iabbrev :shrug: ¯\_(ツ)_/¯
"}
" GUI {
" Remove every bit of GUI option
set guioptions=
" }
" Various {
" Open current file in sublime text
command! Subl silent execute "!open -a \"Sublime Text 2\" %"
" }
" Tests {
autocmd BufReadPost,FileReadPost,BufNewFile * 
    \ call system("tmux rename-window 'vim:" . expand("%:t") . "'")

" Simulate the r operator functionality
function! ROperator()
  call inputsave()
  let l:replace_pattern = input('Replace > ')
  call inputrestore()

  if len(l:replace_pattern) != 3
    throw "Bad pattern size (expected 3)"
  endif

  let l:motion = strpart(replace_pattern, 0, 2)
  let l:char = strpart(replace_pattern, 2, 2)

  execute "normal! v".l:motion."r".l:char
endfunction

nnoremap gr :call ROperator()<CR>

" Display the full path of the current file
function! DisplayFullPath() abort
    echo expand('%:p')
endfunction
command! FP call DisplayFullPath()

function! TodoSave()
" Get the file title or generate a new file based on the current date
" File title is either the first line if it stats with an #
" else it is timestamped
    let l:filename = getline('1')
    if l:filename =~ "^#"
        " replace all spaces by `-` and remove the `#\s+`
        let l:filename = substitute( substitute( substitute(
                    \ l:filename
                    \ , '^#\s\+', '', '')
                    \ , '\s\+$', '', '')
                    \ ,' ', '-', 'g')
    else
        let l:filename = "todo-".localtime()
    endif

    " Save the file on the desktop
    execute "w ~/Desktop/".l:filename.".md"
endfunction
" TS is for Todo Save
command! TS :call TodoSave()

" Create a centered column to write stuff more easily
function! CenterColumn()
    vnew
    vnew
    wincmd L
    wincmd =
    wincmd h
endfunction

command! CenterColumn :call CenterColumn()

function! ScreenCapture()
    let array=[]
    for i in range(1,&lines)
        let row=''
        for j in range(1,&columns)
            let row.=nr2char(screenchar(i,j))
        endfor
        call add(array, row)
    endfor
    tabnew
    call setline(1,array)
endfu
command! ScreenCapture :call ScreenCapture()

function! FollowCursor(follow)
    if a:follow
        nnoremap j jzz
        nnoremap k kzz
    else
        unmap j
        unmap k
    endif
endfunction
command! FollowCursor :call FollowCursor(1)
command! UnfollowCursor :call FollowCursor(0)

" }
