#!/usr/bin/env zsh
#vim: foldmethod=indent

# Global variables, instead of using $1 everywhere
BRANCH=""
REPO=""
NUMBER=""
SLACK_LINK=""

# Help
function usage {
  echo "Usage: gh-pr-repl [-h] [-r repo] [-s slack_link] branch-name [branch-name ...]

  Runs the REPL on the PR based on the repo and branch names.
  If the [owner/repo] is not set, it will try to find from the current one.

  Parameters:
    -h            - Display this message.
    -r repo       - Use a specific repository, must be of the format 'owner/repo'.
    -s slack-link - Deep link for slack, ref https://api.slack.com/reference/deep-linking.
    branch-name   - Branch name(s) to use.

  E.g.
    gh-pr-repl -r cli/cli branch-1
    gh-pr-repl branch-1 branch-2
    gh-pr-repl -s 'slack://channel?team=TXXX?id=CXXX' branch-2
  "
}

# REPL functions
# Mimic what "deploy" means: open the channel and paste the `.deploy` command.
function repl_deploy {
  echo ".deploy https://github.com/$REPO/pull/$NUMBER" | pbcopy

  if [ -n "$SLACK_LINK" ]; then
    open "$SLACK_LINK"
  else
    echo "set -s flag for fast slack opening"
  fi
}

# Split: comments | diff
function repl_view {
  tmux split-window -h -d "gh --repo $REPO pr diff $BRANCH"
  gh --repo "$REPO" pr view --comments "$BRANCH"
}

function repl_status {
  gh --repo "$REPO" pr checks "$BRANCH"
}

function repl_watch {
  while true; do
    repl_status "$REPO" "$BRANCH"
    sleep 1
  done
}

function repl_checkout {
  # Check if we are in the right repo.
  # If so we can checkout and do other stuff.
  remote=$(git config --get remote.origin.url)
  if [ "$remote" = "git@github.com:$REPO.git" ]; then
    gh --repo "$REPO" pr checkout "$BRANCH"
  else
    echo "Cannot checkout $BRANCH, move to where $REPO is cloned."
  fi
}

function repl_help {
  echo "
  h|? - Show this Help
  a   - Approve the PR, no comment
  m   - Merge the PR with 'merge' strategy, no message
  h   - cHeckout the branch if in the right repo
  d   - Deploy the branch from slack

  o   - Open in browser
  v   - View the PR with all the comments
  s   - view PR Status checks
  w   - Watch the status

  c   - Copy the link in the clipboard

  n|q - go to Next branch/Quit on last one
  "
}

# REPL-like function
function repl_main {
  while true; do
    echo -n "$REPO/$BRANCH > "
    read -r -k1 input
    echo ""

    case $input in
      h|'?') repl_help ;;
      a) gh --repo "$REPO" pr review --approve "$BRANCH" ;;
      m) gh --repo "$REPO" pr merge --merge --delete-branch "$BRANCH" ;;
      h) repl_checkout ;;
      d) repl_deploy ;;

      o) gh --repo "$REPO" pr view --web "$BRANCH" ;;
      s) repl_status ;;
      v) repl_view ;;
      w) repl_watch ;;

      c) echo "https://github.com/$REPO/pull/$NUMBER" | pbcopy ;;

      n|q) break ;;
    esac
  done
}

# Main function that processes the branch
function process {
  # Fetch state and number.
  data=$(
  gh --repo "$REPO" \
    pr view \
    --json 'closed,number' \
    -t '{{.closed}},{{.number}}' \
    "$BRANCH"
  )

  if [ "$data" = "" ]; then
    return
  fi

  closed=$(echo "$data" | cut -d, -f1)
  NUMBER=$(echo "$data" | cut -d, -f2)

  # Don't process closed branches
  if [ "$closed" = "true" ]; then
    echo "âœ… $REPO/$BRANCH ($NUMBER)"
    return
  fi

  echo "ðŸ”Ž $REPO/$BRANCH ($NUMBER)"

  repl_status

  echo ""
  repl_main
}

if [ $# -eq 0 ]; then
  usage
  return
fi

while getopts ":hr:s:" opt; do
  case $opt in
    h) usage && return ;;
    r) REPO="$OPTARG" ;;
    s) SLACK_LINK="$OPTARG" ;;
    \?) echo "Invalid option -$OPTARG" >&2 && usage && return ;;
  esac
done

# Shift all the options.
shift "$((OPTIND-1))"

# Loop over all the arguments
for branch in "$@"
do
  BRANCH="$branch"

  process
done
